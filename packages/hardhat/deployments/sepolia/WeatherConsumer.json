{
  "address": "0xc08BCB039cFeC310C6DEDfaa58B00acc53B3bbF0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "donId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "weather",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "temperature",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "humidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "precip1h",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "precip24h",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "weather",
          "type": "string"
        }
      ],
      "name": "WeatherDataReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        }
      ],
      "name": "WeatherRequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getPrecipitation1h",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrecipitation24h",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemperatureCelsius",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeatherData",
      "outputs": [
        {
          "internalType": "string",
          "name": "_weather",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_temperature",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_humidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_precip1h",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_precip24h",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasRain24h",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasRecentRain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "humidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWeatherDataRecent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "location",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precipitation1h",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precipitation24h",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_donId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        }
      ],
      "name": "sendRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "source",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "temperature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "donId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        }
      ],
      "name": "updateConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weather",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0b90910349c9981036bfc72858f7e3232ef2cdd7d3f56b8c7534303b61cfe6b",
  "receipt": {
    "to": null,
    "from": "0xbdDCbe845E67234507F437B251f415Ac256b1C78",
    "contractAddress": "0xc08BCB039cFeC310C6DEDfaa58B00acc53B3bbF0",
    "transactionIndex": 116,
    "gasUsed": "2811218",
    "logsBloom": "0x
    "blockHash": "0x004a57875e44a622a29458771be96a268221effd26ab2e362bfa5c12b41b6527",
    "transactionHash": "0xb0b90910349c9981036bfc72858f7e3232ef2cdd7d3f56b8c7534303b61cfe6b",
    "logs": [
      {
        "transactionIndex": 116,
        "blockNumber": 8701314,
        "transactionHash": "0xb0b90910349c9981036bfc72858f7e3232ef2cdd7d3f56b8c7534303b61cfe6b",
        "address": "0xc08BCB039cFeC310C6DEDfaa58B00acc53B3bbF0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bddcbe845e67234507f437b251f415ac256b1c78"
        ],
        "data": "0x",
        "logIndex": 185,
        "blockHash": "0x004a57875e44a622a29458771be96a268221effd26ab2e362bfa5c12b41b6527"
      }
    ],
    "blockNumber": 8701314,
    "cumulativeGasUsed": "19107775",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD0daae2231E9CB96b94C8512223533293C3693Bf",
    "0x000066756e2d657468657265756d2d7365706f6c69612d310000000000000000",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "9dd91330175bce1702e6c1d676c07519",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"donId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"weather\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"temperature\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"humidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"precip1h\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"precip24h\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"weather\",\"type\":\"string\"}],\"name\":\"WeatherDataReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"WeatherRequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPrecipitation1h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecipitation24h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemperatureCelsius\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeatherData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_weather\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_temperature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_humidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_precip1h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_precip24h\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRain24h\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRecentRain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"humidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWeatherDataRecent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"location\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precipitation1h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precipitation24h\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_donId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"temperature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"donId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weather\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Weather consumer contract using Chainlink Functions Based on official Chainlink Functions documentation\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendRequest(uint64,string[])\":{\"params\":{\"args\":\"The arguments [zipcode, countryCode, units]\",\"subscriptionId\":\"The subscription ID\"},\"returns\":{\"requestId\":\"The ID of the request\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"WeatherConsumer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrecipitation1h()\":{\"notice\":\"Get precipitation in last hour (mm)\"},\"getPrecipitation24h()\":{\"notice\":\"Get precipitation in last 24 hours (mm)\"},\"getTemperatureCelsius()\":{\"notice\":\"Get temperature in Celsius\"},\"getWeatherData()\":{\"notice\":\"Get the latest weather data\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"hasRain24h()\":{\"notice\":\"Check if it rained in the last 24 hours\"},\"hasRecentRain()\":{\"notice\":\"Check if it rained in the last hour\"},\"isWeatherDataRecent()\":{\"notice\":\"Check if weather data is recent\"},\"sendRequest(uint64,string[])\":{\"notice\":\"Send a request for weather data\"},\"updateConfig(bytes32,uint64,uint32,uint16)\":{\"notice\":\"Update Chainlink Functions configuration\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WeatherConsumer.sol\":\"WeatherConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/WeatherConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WeatherConsumer\\r\\n * @dev Weather consumer contract using Chainlink Functions\\r\\n * Based on official Chainlink Functions documentation\\r\\n */\\r\\ncontract WeatherConsumer is FunctionsClient, Ownable {\\r\\n    using FunctionsRequest for FunctionsRequest.Request;\\r\\n\\r\\n    // Chainlink Functions configuration\\r\\n    bytes32 public s_donId;\\r\\n    uint64 public s_subscriptionId;\\r\\n    uint32 public s_callbackGasLimit;\\r\\n    uint16 public s_requestConfirmations;\\r\\n\\r\\n    // Request tracking\\r\\n    bytes32 public s_lastRequestId;\\r\\n    bytes public s_lastResponse;\\r\\n    bytes public s_lastError;\\r\\n\\r\\n    // Weather data\\r\\n    string public weather;\\r\\n    string public location;\\r\\n    uint256 public temperature;\\r\\n    uint256 public humidity;\\r\\n    uint256 public precipitation1h;\\r\\n    uint256 public precipitation24h;\\r\\n    uint256 public lastUpdated;\\r\\n\\r\\n    // Events\\r\\n    event WeatherRequestSent(bytes32 indexed requestId, string location);\\r\\n    event WeatherDataReceived(string location, uint256 temperature, uint256 humidity, uint256 precip1h, uint256 precip24h, string weather);\\r\\n    event Response(bytes32 indexed requestId, string weather, bytes response, bytes err);\\r\\n\\r\\n    // Errors\\r\\n    error UnexpectedRequestID(bytes32 requestId);\\r\\n\\r\\n    constructor(\\r\\n        address router,\\r\\n        bytes32 donId,\\r\\n        uint64 subscriptionId\\r\\n    ) FunctionsClient(router) Ownable(msg.sender) {\\r\\n        s_donId = donId;\\r\\n        s_subscriptionId = subscriptionId;\\r\\n        s_callbackGasLimit = 300000;\\r\\n        s_requestConfirmations = 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send a request for weather data\\r\\n     * @param subscriptionId The subscription ID\\r\\n     * @param args The arguments [zipcode, countryCode, units]\\r\\n     * @return requestId The ID of the request\\r\\n     */\\r\\n    function sendRequest(\\r\\n        uint64 subscriptionId,\\r\\n        string[] calldata args\\r\\n    ) external returns (bytes32 requestId) {\\r\\n        // Create the request\\r\\n        FunctionsRequest.Request memory req;\\r\\n        req.initializeRequestForInlineJavaScript(source);\\r\\n        if (args.length > 0) req.setArgs(args);\\r\\n\\r\\n        // Send the request and store the request ID\\r\\n        s_lastRequestId = _sendRequest(\\r\\n            req.encodeCBOR(),\\r\\n            subscriptionId,\\r\\n            s_callbackGasLimit,\\r\\n            s_donId\\r\\n        );\\r\\n\\r\\n        string memory requestLocation = string.concat(args[0], \\\",\\\", args[1]);\\r\\n        emit WeatherRequestSent(s_lastRequestId, requestLocation);\\r\\n\\r\\n        return s_lastRequestId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Callback function for fulfilling a request\\r\\n     * @param requestId The ID of the request to fulfill\\r\\n     * @param response The HTTP response data\\r\\n     * @param err Any errors from the Functions request\\r\\n     */\\r\\n    function fulfillRequest(\\r\\n        bytes32 requestId,\\r\\n        bytes memory response,\\r\\n        bytes memory err\\r\\n    ) internal override {\\r\\n        if (s_lastRequestId != requestId) {\\r\\n            revert UnexpectedRequestID(requestId);\\r\\n        }\\r\\n\\r\\n        // Update the contract's state variables with the response and any errors\\r\\n        s_lastResponse = response;\\r\\n        weather = string(response);\\r\\n        s_lastError = err;\\r\\n        lastUpdated = block.timestamp;\\r\\n\\r\\n        // Try to extract basic data (simplified)\\r\\n        // In real implementation, you'd parse the JSON response\\r\\n        // For now, we'll store the raw response and set defaults\\r\\n        // The actual parsing would be done in a production contract\\r\\n        temperature = 1850; // 18.5\\u00b0C (default)\\r\\n        humidity = 65; // 65% (default)\\r\\n        precipitation1h = 0; // 0mm (default)\\r\\n        precipitation24h = 0; // 0mm (default)\\r\\n        location = \\\"Unknown\\\"; // Default location\\r\\n\\r\\n        // Emit an event to log the response\\r\\n        emit Response(requestId, weather, s_lastResponse, s_lastError);\\r\\n        emit WeatherDataReceived(location, temperature, humidity, precipitation1h, precipitation24h, weather);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the latest weather data\\r\\n     */\\r\\n    function getWeatherData() external view returns (\\r\\n        string memory _weather,\\r\\n        string memory _location,\\r\\n        uint256 _temperature,\\r\\n        uint256 _humidity,\\r\\n        uint256 _precip1h,\\r\\n        uint256 _precip24h,\\r\\n        uint256 _lastUpdated\\r\\n    ) {\\r\\n        return (weather, location, temperature, humidity, precipitation1h, precipitation24h, lastUpdated);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get temperature in Celsius\\r\\n     */\\r\\n    function getTemperatureCelsius() external view returns (uint256) {\\r\\n        return temperature / 100;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get precipitation in last hour (mm)\\r\\n     */\\r\\n    function getPrecipitation1h() external view returns (uint256) {\\r\\n        return precipitation1h;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get precipitation in last 24 hours (mm)\\r\\n     */\\r\\n    function getPrecipitation24h() external view returns (uint256) {\\r\\n        return precipitation24h;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if it rained in the last hour\\r\\n     */\\r\\n    function hasRecentRain() external view returns (bool) {\\r\\n        return precipitation1h > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if it rained in the last 24 hours\\r\\n     */\\r\\n    function hasRain24h() external view returns (bool) {\\r\\n        return precipitation24h > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if weather data is recent\\r\\n     */\\r\\n    function isWeatherDataRecent() external view returns (bool) {\\r\\n        return (block.timestamp - lastUpdated) < 3600; // 1 hour\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update Chainlink Functions configuration\\r\\n     */\\r\\n    function updateConfig(\\r\\n        bytes32 donId,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint16 requestConfirmations\\r\\n    ) external onlyOwner {\\r\\n        s_donId = donId;\\r\\n        s_subscriptionId = subscriptionId;\\r\\n        s_callbackGasLimit = callbackGasLimit;\\r\\n        s_requestConfirmations = requestConfirmations;\\r\\n    }\\r\\n\\r\\n    // Hardcoded source code for AccuWeather API call\\r\\n    string public source = \\\"let cityName, countryCode; if (typeof args[0] === 'string' && args[0].startsWith('[')) { try { const parsedArgs = JSON.parse(args[0]); cityName = parsedArgs[0]; countryCode = parsedArgs[1]; } catch (e) { throw Error('Invalid arguments format'); } } else { cityName = args[0]; countryCode = args[1]; } if (!secrets.apiKey) { throw Error('AccuWeather API Key is not available!'); } const locationURL = `http://dataservice.accuweather.com/locations/v1/cities/search?apikey=${secrets.apiKey}&q=${cityName}&country=${countryCode}`; const locationResponse = await Functions.makeHttpRequest({ url: locationURL }); if (locationResponse.error) { throw Error('Location search failed'); } if (!locationResponse.data || locationResponse.data.length === 0) { throw Error('No location found for this city'); } const locationKey = locationResponse.data[0].Key; const weatherURL = `http://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${secrets.apiKey}&details=true`; const weatherResponse = await Functions.makeHttpRequest({ url: weatherURL }); if (weatherResponse.error) { throw Error('Weather request failed'); } const weatherData = weatherResponse.data[0]; const result = { temp: weatherData.Temperature.Metric.Value, humidity: weatherData.RelativeHumidity, desc: weatherData.WeatherText, precip1h: weatherData.PrecipitationSummary?.PastHour?.Metric?.Value || 0, precip24h: weatherData.PrecipitationSummary?.Past24Hours?.Metric?.Value || 0 }; return Functions.encodeString(JSON.stringify(result));\\\";\\r\\n} \",\"keccak256\":\"0x6bca9e26a8bd9874d2c4f9db19c6551ec7d851c3c2d07bd350f8033d965f6834\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6106c06040526105e660a08181529062001f7a60c039600d90620000249082620001dc565b503480156200003257600080fd5b5060405162002560380380620025608339810160408190526200005591620002a8565b6001600160a01b03831660805233806200008957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009481620000e7565b50600191909155600280546c010000000000000000000000006001600160401b039093166001600160601b0319909116176a0493e000000000000000001761ffff60601b19169190911790555062000306565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016257607f821691505b6020821081036200018357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d757600081815260208120601f850160051c81016020861015620001b25750805b601f850160051c820191505b81811015620001d357828155600101620001be565b5050505b505050565b81516001600160401b03811115620001f857620001f862000137565b62000210816200020984546200014d565b8462000189565b602080601f8311600181146200024857600084156200022f5750858301515b600019600386901b1c1916600185901b178555620001d3565b600085815260208120601f198616915b82811015620002795788860151825594840194600190910190840162000258565b5085821015620002985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600080600060608486031215620002be57600080fd5b83516001600160a01b0381168114620002d657600080fd5b6020850151604086015191945092506001600160401b0381168114620002fb57600080fd5b809150509250925092565b608051611c5162000329600039600081816103aa0152610d240152611c516000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806378ed59b5116100f9578063c3dc6f4f11610097578063dfd6edd211610071578063dfd6edd214610353578063f2fde38b1461035c578063f88ea2c91461036f578063fac57b9d1461039757600080fd5b8063c3dc6f4f1461030b578063c5b4e9371461031e578063d0b06f5d1461034a57600080fd5b8063a113efa3116100d3578063a113efa3146102e8578063adccea12146102f1578063b1e21749146102fa578063bb0fb9c71461030357600080fd5b806378ed59b5146102875780638ac00021146102a25780638da5cb5b146102cd57600080fd5b8063608e772c1161016657806367e828bf1161014057806367e828bf14610265578063686b61591461026d578063715018a61461027557806378a5cdf01461027d57600080fd5b8063608e772c1461024c578063621a19411461025557806362db0c1f1461025d57600080fd5b806348a7d26d116101a257806348a7d26d146102135780634b0795a814610226578063516f279e1461022e5780636052903b1461023657600080fd5b80630ca76175146101c95780633944ea3a146101de5780633e281f3f146101fc575b600080fd5b6101dc6101d7366004611453565b61039f565b005b6101e6610423565b6040516101f39190611505565b60405180910390f35b610205600a5481565b6040519081526020016101f3565b610205610221366004611534565b6104b1565b6101e6610689565b6101e6610696565b600a5415155b60405190151581526020016101f3565b610205600b5481565b61023c6106a3565b600a54610205565b6101e66106bc565b6101e66106c9565b6101dc6106d6565b600b54151561023c565b61028f6106ea565b6040516101f397969594939291906115b9565b6002546102b5906001600160401b031681565b6040516001600160401b0390911681526020016101f3565b6000546040516001600160a01b0390911681526020016101f3565b61020560095481565b61020560085481565b61020560035481565b610205610837565b6101dc610319366004611609565b61084d565b60025461033590600160401b900463ffffffff1681565b60405163ffffffff90911681526020016101f3565b610205600c5481565b61020560015481565b6101dc61036a36600461166a565b6108aa565b60025461038490600160601b900461ffff1681565b60405161ffff90911681526020016101f3565b600b54610205565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103e85760405163c6829f8360e01b815260040160405180910390fd5b6103f38383836108ed565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6004805461043090611693565b80601f016020809104026020016040519081016040528092919081815260200182805461045c90611693565b80156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b505050505081565b60006104f46040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610591600d805461050490611693565b80601f016020809104026020016040519081016040528092919081815260200182805461053090611693565b801561057d5780601f106105525761010080835404028352916020019161057d565b820191906000526020600020905b81548152906001019060200180831161056057829003601f168201915b505050505082610a0c90919063ffffffff16565b82156105ab576105ab6105a484866116cd565b8290610a1d565b6105d26105b782610a47565b6002546001548891600160401b900463ffffffff1690610d1f565b6003556000848482816105e7576105e7611764565b90506020028101906105f9919061177a565b8686600181811061060c5761060c611764565b905060200281019061061e919061177a565b60405160200161063194939291906117c7565b60405160208183030381529060405290506003547f6d2c2dd7bf4a65e58cb874ed83b481713926a419cf33c6d9284d87593c56bc6f826040516106749190611505565b60405180910390a25050600354949350505050565b6005805461043090611693565b6007805461043090611693565b6000610e10600c54426106b69190611808565b10905090565b600d805461043090611693565b6006805461043090611693565b6106de610df1565b6106e86000610e1e565b565b606080600080600080600060066007600854600954600a54600b54600c5486805461071490611693565b80601f016020809104026020016040519081016040528092919081815260200182805461074090611693565b801561078d5780601f106107625761010080835404028352916020019161078d565b820191906000526020600020905b81548152906001019060200180831161077057829003601f168201915b505050505096508580546107a090611693565b80601f01602080910402602001604051908101604052809291908181526020018280546107cc90611693565b80156108195780601f106107ee57610100808354040283529160200191610819565b820191906000526020600020905b8154815290600101906020018083116107fc57829003601f168201915b50505050509550965096509650965096509650965090919293949596565b600060646008546108489190611831565b905090565b610855610df1565b6001939093556002805461ffff909416600160601b0261ffff60601b1963ffffffff909316600160401b026bffffffffffffffffffffffff199095166001600160401b03909416939093179390931716179055565b6108b2610df1565b6001600160a01b0381166108e157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6108ea81610e1e565b50565b82600354146109125760405163d068bf5b60e01b8152600481018490526024016108d8565b600461091e8382611893565b50600661092b8382611893565b5060056109388282611893565b5042600c5561073a60085560416009556000600a819055600b55604080518082019091526007808252662ab735b737bbb760c91b60208301529061097c9082611893565b50827f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b506006600460056040516109b4939291906119cf565b60405180910390a27f9af78ab791104f1a3258e7d3c6b9eb471d1908be1770981dae3ada4a939d34f66007600854600954600a54600b5460066040516109ff96959493929190611a12565b60405180910390a1505050565b610a198260008084610e6e565b5050565b8051600003610a3f5760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b60606000610a56610100610eec565b9050610a8f6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b81525082610f0d90919063ffffffff16565b8251610aad906002811115610aa657610aa6611a5c565b8290610f2b565b6040805180820190915260088152676c616e677561676560c01b6020820152610ad7908290610f0d565b6040830151610aee908015610aa657610aa6611a5c565b604080518082019091526006815265736f7572636560d01b6020820152610b16908290610f0d565b6060830151610b26908290610f0d565b60a08301515115610bba576040805180820190915260048152636172677360e01b6020820152610b57908290610f0d565b610b6081610f64565b60005b8360a0015151811015610bb057610ba08460a001518281518110610b8957610b89611764565b602002602001015183610f0d90919063ffffffff16565b610ba981611a72565b9050610b63565b50610bba81610f88565b60808301515115610c7e57600083602001516002811115610bdd57610bdd611a5c565b03610bfb5760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152610c2c908290610f0d565b610c4583602001516002811115610aa657610aa6611a5c565b6040805180820190915260078152667365637265747360c81b6020820152610c6e908290610f0d565b6080830151610c7e908290610fa6565b60c08301515115610d175760408051808201909152600981526862797465734172677360b81b6020820152610cb4908290610f0d565b610cbd81610f64565b60005b8360c0015151811015610d0d57610cfd8460c001518281518110610ce657610ce6611764565b602002602001015183610fa690919063ffffffff16565b610d0681611a72565b9050610cc0565b50610d1781610f88565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401610d77959493929190611a8b565b6020604051808303816000875af1158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190611ad4565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b6000546001600160a01b031633146106e85760405163118cdaa760e01b81523360048201526024016108d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600003610e90576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115610ea357610ea3611a5c565b90816002811115610eb657610eb6611a5c565b90525060408401828015610ecc57610ecc611a5c565b90818015610edc57610edc611a5c565b9052506060909301929092525050565b610ef4611361565b8051610f009083610fb3565b5060006020820152919050565b610f1a826003835161102d565b8151610f26908261114c565b505050565b8151610f389060c2611174565b50610a198282604051602001610f5091815260200190565b604051602081830303815290604052610fa6565b610f6f8160046111dd565b600181602001818151610f829190611aed565b90525050565b610f938160076111dd565b600181602001818151610f829190611808565b610f1a826002835161102d565b604080518082019091526060815260006020820152610fd3602083611b00565b15610ffb57610fe3602083611b00565b610fee906020611808565b610ff89083611aed565b91505b60208084018390526040518085526000815290818401018181101561101f57600080fd5b604052508290505b92915050565b6017816001600160401b0316116110595782516110539060e0600585901b168317611174565b50505050565b60ff816001600160401b031611611099578251611081906018611fe0600586901b1617611174565b508251611053906001600160401b03831660016111f4565b61ffff816001600160401b0316116110da5782516110c2906019611fe0600586901b1617611174565b508251611053906001600160401b03831660026111f4565b63ffffffff816001600160401b03161161111d57825161110590601a611fe0600586901b1617611174565b508251611053906001600160401b03831660046111f4565b825161113490601b611fe0600586901b1617611174565b508251611053906001600160401b03831660086111f4565b60408051808201909152606081526000602082015261116d83838451611279565b9392505050565b6040805180820190915260608152600060208201528251516000611199826001611aed565b9050846020015182106111ba576111ba856111b5836002611b14565b61134a565b84516020838201018581535080518211156111d3578181525b5093949350505050565b8151610f2690601f611fe0600585901b1617611174565b60408051808201909152606081526000602082015283515160006112188285611aed565b9050856020015181111561123557611235866111b5836002611b14565b6000600161124586610100611c0f565b61124f9190611808565b9050865182810187831982511617815250805183111561126d578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561129c57600080fd5b83515160006112ab8483611aed565b905085602001518111156112c8576112c8866111b5836002611b14565b8551805183820160200191600091808511156112e2578482525b505050602086015b602086106113225780518252611301602083611aed565b915061130e602082611aed565b905061131b602087611808565b95506112ea565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b81516113568383610fb3565b50611053838261114c565b6040518060400160405280611389604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156113d4576113d4611396565b604052919050565b60006001600160401b038311156113f5576113f5611396565b611408601f8401601f19166020016113ac565b905082815283838301111561141c57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261144457600080fd5b61116d838335602085016113dc565b60008060006060848603121561146857600080fd5b8335925060208401356001600160401b038082111561148657600080fd5b61149287838801611433565b935060408601359150808211156114a857600080fd5b506114b586828701611433565b9150509250925092565b6000815180845260005b818110156114e5576020818501810151868301820152016114c9565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061116d60208301846114bf565b80356001600160401b038116811461152f57600080fd5b919050565b60008060006040848603121561154957600080fd5b61155284611518565b925060208401356001600160401b038082111561156e57600080fd5b818601915086601f83011261158257600080fd5b81358181111561159157600080fd5b8760208260051b85010111156115a657600080fd5b6020830194508093505050509250925092565b60e0815260006115cc60e083018a6114bf565b82810360208401526115de818a6114bf565b604084019890985250506060810194909452608084019290925260a083015260c09091015292915050565b6000806000806080858703121561161f57600080fd5b8435935061162f60208601611518565b9250604085013563ffffffff8116811461164857600080fd5b9150606085013561ffff8116811461165f57600080fd5b939692955090935050565b60006020828403121561167c57600080fd5b81356001600160a01b038116811461116d57600080fd5b600181811c908216806116a757607f821691505b6020821081036116c757634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160401b03808411156116e7576116e7611396565b8360051b60206116f88183016113ac565b86815291850191818101903684111561171057600080fd5b865b848110156117585780358681111561172a5760008081fd5b880136601f82011261173c5760008081fd5b61174a3682358784016113dc565b845250918301918301611712565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261179157600080fd5b8301803591506001600160401b038211156117ab57600080fd5b6020019150368190038213156117c057600080fd5b9250929050565b838582376000848201600b60fa1b815283856001830137600093016001019283525090949350505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611027576110276117f2565b634e487b7160e01b600052601260045260246000fd5b6000826118405761184061181b565b500490565b601f821115610f2657600081815260208120601f850160051c8101602086101561186c5750805b601f850160051c820191505b8181101561188b57828155600101611878565b505050505050565b81516001600160401b038111156118ac576118ac611396565b6118c0816118ba8454611693565b84611845565b602080601f8311600181146118f557600084156118dd5750858301515b600019600386901b1c1916600185901b17855561188b565b600085815260208120601f198616915b8281101561192457888601518255948401946001909101908401611905565b50858210156119425787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000815461195f81611693565b80855260206001838116801561197c5760018114611996576119c4565b60ff1985168884015283151560051b8801830195506119c4565b866000528260002060005b858110156119bc5781548a82018601529083019084016119a1565b890184019650505b505050505092915050565b6060815260006119e26060830186611952565b82810360208401526119f48186611952565b90508281036040840152611a088185611952565b9695505050505050565b60c081526000611a2560c0830189611952565b87602084015286604084015285606084015284608084015282810360a0840152611a4f8185611952565b9998505050505050505050565b634e487b7160e01b600052602160045260246000fd5b600060018201611a8457611a846117f2565b5060010190565b6001600160401b038616815260a060208201526000611aad60a08301876114bf565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b600060208284031215611ae657600080fd5b5051919050565b80820180821115611027576110276117f2565b600082611b0f57611b0f61181b565b500690565b8082028115828204841417611027576110276117f2565b600181815b80851115611b66578160001904821115611b4c57611b4c6117f2565b80851615611b5957918102915b93841c9390800290611b30565b509250929050565b600082611b7d57506001611027565b81611b8a57506000611027565b8160018114611ba05760028114611baa57611bc6565b6001915050611027565b60ff841115611bbb57611bbb6117f2565b50506001821b611027565b5060208310610133831016604e8410600b8410161715611be9575081810a611027565b611bf38383611b2b565b8060001904821115611c0757611c076117f2565b029392505050565b600061116d8383611b6e56fea26469706673582212208e5594c83598fc2e21de1826f05fa9c92ec2186c6e9225be6b3d983bc1a3704664736f6c634300081400336c657420636974794e616d652c20636f756e747279436f64653b2069662028747970656f6620617267735b305d203d3d3d2027737472696e672720262620617267735b305d2e7374617274735769746828275b272929207b20747279207b20636f6e73742070617273656441726773203d204a534f4e2e706172736528617267735b305d293b20636974794e616d65203d20706172736564417267735b305d3b20636f756e747279436f6465203d20706172736564417267735b315d3b207d20636174636820286529207b207468726f77204572726f722827496e76616c696420617267756d656e747320666f726d617427293b207d207d20656c7365207b20636974794e616d65203d20617267735b305d3b20636f756e747279436f6465203d20617267735b315d3b207d206966202821736563726574732e6170694b657929207b207468726f77204572726f722827416363755765617468657220415049204b6579206973206e6f7420617661696c61626c652127293b207d20636f6e7374206c6f636174696f6e55524c203d2060687474703a2f2f64617461736572766963652e61636375776561746865722e636f6d2f6c6f636174696f6e732f76312f6369746965732f7365617263683f6170696b65793d247b736563726574732e6170694b65797d26713d247b636974794e616d657d26636f756e7472793d247b636f756e747279436f64657d603b20636f6e7374206c6f636174696f6e526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b2075726c3a206c6f636174696f6e55524c207d293b20696620286c6f636174696f6e526573706f6e73652e6572726f7229207b207468726f77204572726f7228274c6f636174696f6e20736561726368206661696c656427293b207d2069662028216c6f636174696f6e526573706f6e73652e64617461207c7c206c6f636174696f6e526573706f6e73652e646174612e6c656e677468203d3d3d203029207b207468726f77204572726f7228274e6f206c6f636174696f6e20666f756e6420666f722074686973206369747927293b207d20636f6e7374206c6f636174696f6e4b6579203d206c6f636174696f6e526573706f6e73652e646174615b305d2e4b65793b20636f6e7374207765617468657255524c203d2060687474703a2f2f64617461736572766963652e61636375776561746865722e636f6d2f63757272656e74636f6e646974696f6e732f76312f247b6c6f636174696f6e4b65797d3f6170696b65793d247b736563726574732e6170694b65797d2664657461696c733d74727565603b20636f6e73742077656174686572526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b2075726c3a207765617468657255524c207d293b206966202877656174686572526573706f6e73652e6572726f7229207b207468726f77204572726f722827576561746865722072657175657374206661696c656427293b207d20636f6e7374207765617468657244617461203d2077656174686572526573706f6e73652e646174615b305d3b20636f6e737420726573756c74203d207b2074656d703a2077656174686572446174612e54656d70657261747572652e4d65747269632e56616c75652c2068756d69646974793a2077656174686572446174612e52656c617469766548756d69646974792c20646573633a2077656174686572446174612e57656174686572546578742c2070726563697031683a2077656174686572446174612e50726563697069746174696f6e53756d6d6172793f2e50617374486f75723f2e4d65747269633f2e56616c7565207c7c20302c207072656369703234683a2077656174686572446174612e50726563697069746174696f6e53756d6d6172793f2e506173743234486f7572733f2e4d65747269633f2e56616c7565207c7c2030207d3b2072657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e6769667928726573756c7429293b",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Weather consumer contract using Chainlink Functions Based on official Chainlink Functions documentation",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendRequest(uint64,string[])": {
        "params": {
          "args": "The arguments [zipcode, countryCode, units]",
          "subscriptionId": "The subscription ID"
        },
        "returns": {
          "requestId": "The ID of the request"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "WeatherConsumer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrecipitation1h()": {
        "notice": "Get precipitation in last hour (mm)"
      },
      "getPrecipitation24h()": {
        "notice": "Get precipitation in last 24 hours (mm)"
      },
      "getTemperatureCelsius()": {
        "notice": "Get temperature in Celsius"
      },
      "getWeatherData()": {
        "notice": "Get the latest weather data"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "hasRain24h()": {
        "notice": "Check if it rained in the last 24 hours"
      },
      "hasRecentRain()": {
        "notice": "Check if it rained in the last hour"
      },
      "isWeatherDataRecent()": {
        "notice": "Check if weather data is recent"
      },
      "sendRequest(uint64,string[])": {
        "notice": "Send a request for weather data"
      },
      "updateConfig(bytes32,uint64,uint32,uint16)": {
        "notice": "Update Chainlink Functions configuration"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2076,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2261,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "s_donId",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2263,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 2265,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "s_callbackGasLimit",
        "offset": 8,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 2267,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "s_requestConfirmations",
        "offset": 12,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 2269,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 2271,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "s_lastResponse",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2273,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "s_lastError",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2275,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "weather",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2277,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "location",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2279,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "temperature",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2281,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "humidity",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2283,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "precipitation1h",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2285,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "precipitation24h",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2287,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "lastUpdated",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2626,
        "contract": "contracts/WeatherConsumer.sol:WeatherConsumer",
        "label": "source",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}