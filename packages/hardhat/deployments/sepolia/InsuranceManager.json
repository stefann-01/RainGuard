{
  "address": "0xd39f86Efb6F91a8Fb5996c4406d52d77cC5c2A32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "InsuranceRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "OfferSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "expert",
          "type": "address"
        }
      ],
      "name": "OfferSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "PolicyActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "payout",
          "type": "bool"
        }
      ],
      "name": "PolicySettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PoolFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "expert",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "scoreChange",
          "type": "int256"
        }
      ],
      "name": "ReputationUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "enum WeatherType",
              "name": "weatherType",
              "type": "uint8"
            },
            {
              "internalType": "enum Operator",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "aggregateValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subThreshold",
              "type": "uint256"
            },
            {
              "internalType": "enum Operator",
              "name": "subOp",
              "type": "uint8"
            }
          ],
          "internalType": "struct WeatherCondition[]",
          "name": "conditions",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "createRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "expertReputation",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRequestIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getConditions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum WeatherType",
              "name": "weatherType",
              "type": "uint8"
            },
            {
              "internalType": "enum Operator",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "aggregateValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "subThreshold",
              "type": "uint256"
            },
            {
              "internalType": "enum Operator",
              "name": "subOp",
              "type": "uint8"
            }
          ],
          "internalType": "struct WeatherCondition[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getInvestments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "investor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Investment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getOffers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "expert",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Offer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestBasic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "totalFunded",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "payout",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "selectedOffer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payPremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "selectedOffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFunded",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "payout",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "selectOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "conditionMet",
          "type": "bool"
        }
      ],
      "name": "settlePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "submitOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expert",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "scoreChange",
          "type": "int256"
        }
      ],
      "name": "updateReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "withdrawInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x640f9c0ecf96e99c20bca3983d61455732104f93fecbfa001f80d5ee6a4ee34b",
  "receipt": {
    "to": null,
    "from": "0xbdDCbe845E67234507F437B251f415Ac256b1C78",
    "contractAddress": "0xd39f86Efb6F91a8Fb5996c4406d52d77cC5c2A32",
    "transactionIndex": 87,
    "gasUsed": "2340337",
    "logsBloom": "0x
    "blockHash": "0xfb22961e4a986c16edb7f6e22cdf9484db554480686d1093e60bbb50a86fa0ac",
    "transactionHash": "0x640f9c0ecf96e99c20bca3983d61455732104f93fecbfa001f80d5ee6a4ee34b",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 8700458,
        "transactionHash": "0x640f9c0ecf96e99c20bca3983d61455732104f93fecbfa001f80d5ee6a4ee34b",
        "address": "0xd39f86Efb6F91a8Fb5996c4406d52d77cC5c2A32",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bddcbe845e67234507f437b251f415ac256b1c78"
        ],
        "data": "0x",
        "logIndex": 195,
        "blockHash": "0xfb22961e4a986c16edb7f6e22cdf9484db554480686d1093e60bbb50a86fa0ac"
      }
    ],
    "blockNumber": 8700458,
    "cumulativeGasUsed": "18426709",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbdDCbe845E67234507F437B251f415Ac256b1C78",
    "0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238"
  ],
  "numDeployments": 1,
  "solcInputHash": "22766a473eacc6f8b2fd56cf4ed305e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InsuranceRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"}],\"name\":\"OfferSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PolicyActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"payout\",\"type\":\"bool\"}],\"name\":\"PolicySettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"scoreChange\",\"type\":\"int256\"}],\"name\":\"ReputationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum WeatherType\",\"name\":\"weatherType\",\"type\":\"uint8\"},{\"internalType\":\"enum Operator\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"aggregateValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subThreshold\",\"type\":\"uint256\"},{\"internalType\":\"enum Operator\",\"name\":\"subOp\",\"type\":\"uint8\"}],\"internalType\":\"struct WeatherCondition[]\",\"name\":\"conditions\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expertReputation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRequestIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getConditions\",\"outputs\":[{\"components\":[{\"internalType\":\"enum WeatherType\",\"name\":\"weatherType\",\"type\":\"uint8\"},{\"internalType\":\"enum Operator\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"aggregateValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subThreshold\",\"type\":\"uint256\"},{\"internalType\":\"enum Operator\",\"name\":\"subOp\",\"type\":\"uint8\"}],\"internalType\":\"struct WeatherCondition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getInvestments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Investment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getOffers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Offer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestBasic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalFunded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payout\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"selectedOffer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"selectedOffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFunded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payout\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"selectOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"conditionMet\",\"type\":\"bool\"}],\"name\":\"settlePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"submitOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expert\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"scoreChange\",\"type\":\"int256\"}],\"name\":\"updateReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"withdrawInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InsuranceManager.sol\":\"InsuranceManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/EventsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary EventsLib {\\n    event InsuranceRequestCreated(uint256 indexed requestId, address indexed user);\\n    event OfferSubmitted(uint256 indexed requestId, uint256 indexed offerId, address indexed expert);\\n    event OfferSelected(uint256 indexed requestId, uint256 indexed offerId);\\n    event PoolFunded(uint256 indexed poolId, address indexed investor, uint256 amount);\\n    event PolicyActivated(uint256 indexed requestId, uint256 indexed poolId);\\n    event PolicySettled(uint256 indexed requestId, bool payout);\\n    event ReputationUpdated(address indexed expert, int256 scoreChange);\\n} \",\"keccak256\":\"0x4b86924abd3f27c619f1af132d60f45f58a6083d998b79529992e54d3e1ab595\",\"license\":\"MIT\"},\"contracts/IInsuranceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Top-level type definitions for use across contracts\\n\\nenum WeatherType { Rain, Wind, Tornado, Flood, Hail }\\nenum Operator { LessThan, GreaterThan, Equal }\\n\\nstruct WeatherCondition {\\n    WeatherType weatherType; // e.g., Wind\\n    Operator op;             // e.g., GreaterThan (for the count or threshold)\\n    uint256 aggregateValue;  // e.g., 100 (hours) or threshold value for simple cases\\n    uint256 subThreshold;    // e.g., 50 (km/h), 0 for simple cases\\n    Operator subOp;          // e.g., GreaterThan (for wind speed), 0 for simple cases\\n}\\n\\nstruct Offer {\\n    address expert;\\n    uint256 premium;\\n    uint256 timestamp;\\n}\\n\\nstruct Investment {\\n    address investor;\\n    uint256 amount;\\n}\\n\\nstruct InsuranceRequest {\\n    uint256 id;\\n    string title;\\n    string description;\\n    address user;\\n    uint256 amount;\\n    WeatherCondition[] conditions;\\n    string location;\\n    uint256 start; // unix timestamp\\n    uint256 end; // unix timestamp\\n    uint8 status; // 0: pending, 1: funding, 2: premium, 3: active, 4: expired, 5: cancelled\\n    Offer[] offers;\\n    uint256 selectedOffer; // offer index\\n    Investment[] investments;\\n    uint256 totalFunded;\\n    bool payout; // true if payout was made\\n}\\n\\ninterface IInsuranceManager {\\n    function createRequest(\\n        string memory title,\\n        string memory description,\\n        uint256 amount,\\n        WeatherCondition[] memory conditions,\\n        string memory location,\\n        uint256 start,\\n        uint256 end\\n    ) external;\\n\\n    function submitOffer(uint256 requestId, uint256 premium) external;\\n    function selectOffer(uint256 requestId, uint256 offerId) external;\\n    function fundPool(uint256 requestId, uint256 amount) external;\\n    function payPremium(uint256 requestId, uint256 amount) external;\\n    function settlePolicy(uint256 requestId, bool conditionMet) external;\\n    function withdrawInvestment(uint256 requestId) external;\\n    function updateReputation(address expert, int256 scoreChange) external;\\n\\n    function getRequestBasic(uint256 requestId) external view returns (\\n        uint256 id,\\n        string memory title,\\n        string memory description,\\n        address user,\\n        uint256 amount,\\n        string memory location,\\n        uint256 start,\\n        uint256 end,\\n        uint8 status,\\n        uint256 totalFunded,\\n        bool payout,\\n        uint256 selectedOffer\\n    );\\n    function getOffers(uint256 requestId) external view returns (Offer[] memory);\\n    function getInvestments(uint256 requestId) external view returns (Investment[] memory);\\n    function getConditions(uint256 requestId) external view returns (WeatherCondition[] memory);\\n    function getAllRequestIds() external view returns (uint256[] memory);\\n} \",\"keccak256\":\"0x5b1b7cceb13a3dbde3592494a9e65313dc1bfb60b709c286fb0f6d0b557309bb\",\"license\":\"MIT\"},\"contracts/InsuranceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {\\n    WeatherType,\\n    Operator,\\n    WeatherCondition,\\n    Offer,\\n    Investment,\\n    InsuranceRequest\\n} from \\\"./IInsuranceManager.sol\\\";\\nimport { IInsuranceManager } from \\\"./IInsuranceManager.sol\\\";\\nimport { EventsLib } from \\\"./EventsLib.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract InsuranceManager is IInsuranceManager, Ownable {\\n    address public usdc;\\n\\n    constructor(address initialOwner, address usdcAddress) Ownable(initialOwner) {\\n        usdc = usdcAddress;\\n    }\\n    // Storage\\n    uint256 public requestCount;\\n    uint256[] public requestIds; // Track all request IDs\\n    mapping(uint256 => InsuranceRequest) public requests;\\n    mapping(address => int256) public expertReputation;\\n\\n    // Create a new insurance request with multiple weather conditions\\n    function createRequest(\\n        string memory title,\\n        string memory description,\\n        uint256 amount,\\n        WeatherCondition[] memory conditions,\\n        string memory location,\\n        uint256 start,\\n        uint256 end\\n    ) external {\\n        require(amount > 0, \\\"Amount must be positive\\\");\\n        require(start < end, \\\"Invalid time period\\\");\\n        require(conditions.length > 0, \\\"At least one condition required\\\");\\n        uint256 requestId = requestCount;\\n        InsuranceRequest storage req = requests[requestId];\\n        req.id = requestId;\\n        req.title = title;\\n        req.description = description;\\n        req.user = msg.sender;\\n        req.amount = amount;\\n        req.location = location;\\n        req.start = start;\\n        req.end = end;\\n        req.status = 0; // pending\\n        for (uint256 i = 0; i < conditions.length; i++) {\\n            req.conditions.push(conditions[i]);\\n        }\\n        requestCount++;\\n        requestIds.push(requestId);\\n        emit EventsLib.InsuranceRequestCreated(requestId, msg.sender);\\n    }\\n\\n    // Experts submit offers for a request\\n    function submitOffer(uint256 requestId, uint256 premium) external {\\n        InsuranceRequest storage req = requests[requestId];\\n        require(req.user != address(0), \\\"Request does not exist\\\");\\n        require(req.status == 0, \\\"Request not pending\\\");\\n        require(premium > 0, \\\"Premium must be positive\\\");\\n        Offer memory offer = Offer({\\n            expert: msg.sender,\\n            premium: premium,\\n            timestamp: block.timestamp\\n        });\\n        req.offers.push(offer);\\n        uint256 offerId = req.offers.length - 1;\\n        emit EventsLib.OfferSubmitted(requestId, offerId, msg.sender);\\n    }\\n\\n    // Only request creator can select an offer\\n    function selectOffer(uint256 requestId, uint256 offerId) external {\\n        InsuranceRequest storage req = requests[requestId];\\n        require(req.user == msg.sender, \\\"Not request creator\\\");\\n        require(req.status == 0, \\\"Request not pending\\\");\\n        require(offerId < req.offers.length, \\\"Invalid offerId\\\");\\n        req.selectedOffer = offerId;\\n        req.status = 1; // funding\\n        emit EventsLib.OfferSelected(requestId, offerId);\\n    }\\n\\n    // Investors fund the pool for the selected request using USDC\\n    function fundPool(uint256 requestId, uint256 amount) external {\\n        InsuranceRequest storage req = requests[requestId];\\n        require(req.status == 1, \\\"Not in funding phase\\\");\\n        require(amount > 0, \\\"No funds sent\\\");\\n        // Transfer USDC from sender to contract\\n        require(IERC20(usdc).transferFrom(msg.sender, address(this), amount), \\\"USDC transfer failed\\\");\\n        // Add or update investment\\n        bool found = false;\\n        for (uint256 i = 0; i < req.investments.length; i++) {\\n            if (req.investments[i].investor == msg.sender) {\\n                req.investments[i].amount += amount;\\n                found = true;\\n                break;\\n            }\\n        }\\n        if (!found) {\\n            req.investments.push(Investment({\\n                investor: msg.sender,\\n                amount: amount\\n            }));\\n        }\\n        req.totalFunded += amount;\\n        emit EventsLib.PoolFunded(requestId, msg.sender, amount);\\n        // Funding goal is amount (coverage only)\\n        if (req.totalFunded >= req.amount) {\\n            req.status = 2; // premium payment phase\\n            // PolicyActivated will be emitted after premium is paid\\n        }\\n    }\\n\\n    // User pays premium after pool is funded; premium is distributed to investors and expert using USDC\\n    function payPremium(uint256 requestId, uint256 amount) external {\\n        InsuranceRequest storage req = requests[requestId];\\n        require(req.user == msg.sender, \\\"Only request creator can pay premium\\\");\\n        require(req.status == 2, \\\"Not in premium payment phase\\\");\\n        require(req.offers.length > 0, \\\"No offer selected\\\");\\n        require(req.selectedOffer < req.offers.length, \\\"Invalid selected offer\\\");\\n        uint256 premium = req.offers[req.selectedOffer].premium;\\n        require(amount == premium, \\\"Incorrect premium amount\\\");\\n        // Transfer USDC from sender to contract\\n        require(IERC20(usdc).transferFrom(msg.sender, address(this), amount), \\\"USDC transfer failed\\\");\\n        // Calculate total investment\\n        uint256 totalFunded = req.totalFunded;\\n        require(totalFunded >= req.amount, \\\"Pool not fully funded\\\");\\n        // Calculate expert share (5%)\\n        uint256 expertShare = (premium * 5) / 100;\\n        address expert = req.offers[req.selectedOffer].expert;\\n        require(IERC20(usdc).transfer(expert, expertShare), \\\"Expert payment failed\\\");\\n        // Distribute remaining premium (95%) to investors\\n        uint256 remainingPremium = premium - expertShare;\\n        for (uint256 i = 0; i < req.investments.length; i++) {\\n            uint256 share = (remainingPremium * req.investments[i].amount) / totalFunded;\\n            require(IERC20(usdc).transfer(req.investments[i].investor, share), \\\"Premium distribution failed\\\");\\n        }\\n        req.status = 3; // active\\n        emit EventsLib.PolicyActivated(requestId, requestId);\\n    }\\n\\n    // Settle the policy after the period ends; mock oracle integration\\n    function settlePolicy(uint256 requestId, bool conditionMet) external {\\n        InsuranceRequest storage req = requests[requestId];\\n        require(req.status == 3, \\\"Policy not active\\\");\\n        require(block.timestamp >= req.end, \\\"Policy period not ended\\\");\\n        // In production, call oracle and check all conditions\\n        // For now, use conditionMet as a mock result\\n        bool payout = conditionMet;\\n        req.payout = payout;\\n        if (payout) {\\n            // Pay out to user from the pool in USDC\\n            uint256 payoutAmount = req.amount;\\n            require(IERC20(usdc).balanceOf(address(this)) >= payoutAmount, \\\"Insufficient USDC balance\\\");\\n            require(IERC20(usdc).transfer(req.user, payoutAmount), \\\"Payout failed\\\");\\n        }\\n        req.status = 4; // expired\\n        emit EventsLib.PolicySettled(requestId, payout);\\n        // Update expert reputation\\n        address expert = req.offers[req.selectedOffer].expert;\\n        if (payout) {\\n            updateReputation(expert, -10); // Penalize expert for mispricing\\n        } else {\\n            updateReputation(expert, 5); // Reward expert for correct pricing\\n        }\\n    }\\n\\n    // Investors can withdraw their funds if policy did not default\\n    function withdrawInvestment(uint256 requestId) external {\\n        InsuranceRequest storage req = requests[requestId];\\n        require(req.status == 4, \\\"Policy not settled\\\");\\n        require(!req.payout, \\\"Policy defaulted, no withdrawal\\\");\\n        uint256 amount = 0;\\n        for (uint256 i = 0; i < req.investments.length; i++) {\\n            if (req.investments[i].investor == msg.sender && req.investments[i].amount > 0) {\\n                amount = req.investments[i].amount;\\n                req.investments[i].amount = 0; // Prevent double-withdrawal\\n                break;\\n            }\\n        }\\n        require(amount > 0, \\\"No funds to withdraw\\\");\\n        require(IERC20(usdc).transfer(msg.sender, amount), \\\"Withdrawal failed\\\");\\n    }\\n\\n    // Update expert reputation (simple logic)\\n    function updateReputation(address expert, int256 scoreChange) public {\\n        expertReputation[expert] += scoreChange;\\n        emit EventsLib.ReputationUpdated(expert, scoreChange);\\n    }\\n\\n    // Getter for basic InsuranceRequest fields (excluding arrays to avoid stack too deep)\\n    function getRequestBasic(uint256 requestId) external view returns (\\n        uint256 id,\\n        string memory title,\\n        string memory description,\\n        address user,\\n        uint256 amount,\\n        string memory location,\\n        uint256 start,\\n        uint256 end,\\n        uint8 status,\\n        uint256 totalFunded,\\n        bool payout,\\n        uint256 selectedOffer\\n    ) {\\n        InsuranceRequest storage req = requests[requestId];\\n        return (\\n            req.id,\\n            req.title,\\n            req.description,\\n            req.user,\\n            req.amount,\\n            req.location,\\n            req.start,\\n            req.end,\\n            req.status,\\n            req.totalFunded,\\n            req.payout,\\n            req.selectedOffer\\n        );\\n    }\\n\\n    // Array getters - return entire arrays\\n    function getOffers(uint256 requestId) external view returns (Offer[] memory) {\\n        return requests[requestId].offers;\\n    }\\n\\n    function getInvestments(uint256 requestId) external view returns (Investment[] memory) {\\n        return requests[requestId].investments;\\n    }\\n\\n    function getConditions(uint256 requestId) external view returns (WeatherCondition[] memory) {\\n        return requests[requestId].conditions;\\n    }\\n\\n    // Getter for all request IDs\\n    function getAllRequestIds() external view returns (uint256[] memory) {\\n        return requestIds;\\n    }\\n} \",\"keccak256\":\"0x17816a752a83b91f6f05e187a7b972b40a5c2815eed20dd1470995bc634c4e22\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2076,
        "contract": "contracts/InsuranceManager.sol:InsuranceManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3277,
        "contract": "contracts/InsuranceManager.sol:InsuranceManager",
        "label": "usdc",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3294,
        "contract": "contracts/InsuranceManager.sol:InsuranceManager",
        "label": "requestCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3297,
        "contract": "contracts/InsuranceManager.sol:InsuranceManager",
        "label": "requestIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3302,
        "contract": "contracts/InsuranceManager.sol:InsuranceManager",
        "label": "requests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(InsuranceRequest)3125_storage)"
      },
      {
        "astId": 3306,
        "contract": "contracts/InsuranceManager.sol:InsuranceManager",
        "label": "expertReputation",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_int256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Investment)3088_storage)dyn_storage": {
        "base": "t_struct(Investment)3088_storage",
        "encoding": "dynamic_array",
        "label": "struct Investment[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Offer)3083_storage)dyn_storage": {
        "base": "t_struct(Offer)3083_storage",
        "encoding": "dynamic_array",
        "label": "struct Offer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WeatherCondition)3076_storage)dyn_storage": {
        "base": "t_struct(WeatherCondition)3076_storage",
        "encoding": "dynamic_array",
        "label": "struct WeatherCondition[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Operator)3062": {
        "encoding": "inplace",
        "label": "enum Operator",
        "numberOfBytes": "1"
      },
      "t_enum(WeatherType)3058": {
        "encoding": "inplace",
        "label": "enum WeatherType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(InsuranceRequest)3125_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InsuranceRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(InsuranceRequest)3125_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InsuranceRequest)3125_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceRequest",
        "members": [
          {
            "astId": 3090,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3092,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3094,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3096,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "user",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3098,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3102,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "conditions",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(WeatherCondition)3076_storage)dyn_storage"
          },
          {
            "astId": 3104,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "location",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3106,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "start",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3108,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "end",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3110,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_uint8"
          },
          {
            "astId": 3114,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "offers",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_struct(Offer)3083_storage)dyn_storage"
          },
          {
            "astId": 3116,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "selectedOffer",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 3120,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "investments",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_struct(Investment)3088_storage)dyn_storage"
          },
          {
            "astId": 3122,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "totalFunded",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 3124,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "payout",
            "offset": 0,
            "slot": "14",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Investment)3088_storage": {
        "encoding": "inplace",
        "label": "struct Investment",
        "members": [
          {
            "astId": 3085,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "investor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3087,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Offer)3083_storage": {
        "encoding": "inplace",
        "label": "struct Offer",
        "members": [
          {
            "astId": 3078,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "expert",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3080,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "premium",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3082,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(WeatherCondition)3076_storage": {
        "encoding": "inplace",
        "label": "struct WeatherCondition",
        "members": [
          {
            "astId": 3065,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "weatherType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(WeatherType)3058"
          },
          {
            "astId": 3068,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "op",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Operator)3062"
          },
          {
            "astId": 3070,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "aggregateValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3072,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "subThreshold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3075,
            "contract": "contracts/InsuranceManager.sol:InsuranceManager",
            "label": "subOp",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Operator)3062"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}